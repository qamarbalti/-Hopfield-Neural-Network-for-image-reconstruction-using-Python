# -*- coding: utf-8 -*-
"""Problem 5 b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MfuEG6cXKl_FDhBC2SUuwmo0rfa0B2UZ
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt

# Load and preprocess the MNIST dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()
train_images = train_images.reshape((60000, 28, 28, 1)).astype('float32') / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype('float32') / 255

# Define the ART neural network
class ARTNetwork(models.Model):
    def __init__(self, vigilance_parameter):
        super(ARTNetwork, self).__init__()
        self.vigilance_parameter = vigilance_parameter
        self.flatten = layers.Flatten()
        self.fc1 = layers.Dense(256, activation='relu')
        self.fc2 = layers.Dense(10, activation='softmax')

    def call(self, inputs):
        x = self.flatten(inputs)
        x = self.fc1(x)
        return self.fc2(x)

# Function to train the ART network
def train_ART_network(vigilance_parameter):
    art_model = ARTNetwork(vigilance_parameter)
    art_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    art_model.fit(train_images, train_labels, epochs=5, batch_size=64, validation_split=0.1)
    return art_model

# Function to evaluate the ART network and visualize results
def evaluate_ART_network(model, vigilance_parameter):
    test_loss, test_acc = model.evaluate(test_images, test_labels)
    print(f"Vigilance Parameter: {vigilance_parameter}")
    print(f"Test Accuracy: {test_acc}")

    # Visualize samples
    predictions = model.predict(test_images)
    num_samples = 10
    selected_samples = np.random.choice(len(test_images), num_samples, replace=False)

    plt.figure(figsize=(12, 5))
    for i, sample_index in enumerate(selected_samples):
        plt.subplot(2, num_samples, i + 1)
        plt.imshow(test_images[sample_index].reshape(28, 28), cmap='gray')
        plt.title(f"Actual: {test_labels[sample_index]}\nPredicted: {np.argmax(predictions[sample_index])}")
        plt.axis('off')
    plt.show()

# Experiment with different vigilance parameters
vigilance_parameters = [0.4, 0.6, 0.8]
for vigilance_parameter in vigilance_parameters:
    model = train_ART_network(vigilance_parameter)
    evaluate_ART_network(model, vigilance_parameter)